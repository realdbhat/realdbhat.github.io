<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>适配器模式</title>
    <url>/papers/java/adapter/</url>
    <content><![CDATA[<p>不管你要什么输出，我都能通过输入转换出来        ——适配器模式</p>
<a id="more"></a>

<p>适配器模式主要分为3种:类适配器，对象适配器，接口适配器。</p>
<p>生活中其实也有许多这样的场景: 最常见的就是插座适配器，翻译官做的也是适配的工作，还有内外币转换等。</p>
<p>适配器模式主要是将被适配对象的输出做为输入，对输入进行相应处理再输出。</p>
<h4 id="类适配器"><a href="#类适配器" class="headerlink" title="类适配器"></a>类适配器</h4><p>类适配器主要是通过类的继承实现的，java是单继承，适配的指向性过强。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//被适配对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CNY</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> BigDecimal yuan;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CNY</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CNY</span><span class="params">(BigDecimal yuan)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.yuan = yuan;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BigDecimal <span class="title">getYuan</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> yuan;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//适配器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Adapter</span> <span class="keyword">extends</span> <span class="title">CNY</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> BigDecimal <span class="title">toUSD</span><span class="params">(BigDecimal yuan)</span> </span>&#123;</span><br><span class="line">        BigDecimal currentExchangeRate = <span class="keyword">new</span> BigDecimal(<span class="number">1435</span>);</span><br><span class="line">        BigDecimal USD = yuan.multiply(currentExchangeRate).divide(<span class="keyword">new</span> BigDecimal(<span class="number">10000</span>), <span class="number">2</span>, BigDecimal.ROUND_HALF_UP);</span><br><span class="line">        System.out.println(<span class="string">"Input CNY: "</span> + yuan + <span class="string">" yuan, Output USD: "</span> + USD + <span class="string">" dollar."</span>);</span><br><span class="line">        <span class="keyword">return</span> USD;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//消费方</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Chinese</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> CNY money;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Chinese</span><span class="params">(CNY money)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.money = money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CNY <span class="title">getMoney</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Chinese someone = <span class="keyword">new</span> Chinese(<span class="keyword">new</span> CNY(<span class="keyword">new</span> BigDecimal(<span class="number">100</span>)));</span><br><span class="line">        Adapter adapter = <span class="keyword">new</span> Adapter();</span><br><span class="line">        adapter.toUSD(someone.getMoney().getYuan());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="对象适配器"><a href="#对象适配器" class="headerlink" title="对象适配器"></a>对象适配器</h4><p>对象适配器可以通过聚合实现一对多的适配，扩展性更强，违反OCP原则。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//被适配对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CNY</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> BigDecimal yuan;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CNY</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CNY</span><span class="params">(BigDecimal yuan)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.yuan = yuan;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BigDecimal <span class="title">getYuan</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> yuan;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//适配器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Adapter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> CNY cny;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Adapter</span><span class="params">(CNY cny)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cny = cny;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BigDecimal <span class="title">toUSD</span><span class="params">(BigDecimal yuan)</span> </span>&#123;</span><br><span class="line">        BigDecimal currentExchangeRate = <span class="keyword">new</span> BigDecimal(<span class="number">1435</span>);</span><br><span class="line">        BigDecimal USD = yuan.multiply(currentExchangeRate)</span><br><span class="line">                .divide(<span class="keyword">new</span> BigDecimal(<span class="number">10000</span>), <span class="number">2</span>, BigDecimal.ROUND_HALF_UP);</span><br><span class="line">        System.out.println(<span class="string">"Input CNY: "</span> + yuan + <span class="string">" yuan, Output USD: "</span> + USD + <span class="string">" dollar."</span>);</span><br><span class="line">        <span class="keyword">return</span> USD;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//消费方</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Chinese</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> CNY money;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Chinese</span><span class="params">(CNY money)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.money = money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CNY <span class="title">getMoney</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Chinese someone = <span class="keyword">new</span> Chinese(<span class="keyword">new</span> CNY(<span class="keyword">new</span> BigDecimal(<span class="number">100</span>)));</span><br><span class="line">        Adapter adapter = <span class="keyword">new</span> Adapter(someone.getMoney());</span><br><span class="line">        adapter.toUSD(someone.getMoney().getYuan());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="接口适配器"><a href="#接口适配器" class="headerlink" title="接口适配器"></a>接口适配器</h4><p>接口适配是在类适配上做了些优化，通过接口和抽象类的结构，并在抽象类中对接口方法做了空实现，提供一个伪接口的功能，让子类可以选择性的去适配部分对象，缺点也很明显，还是java的单继承。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//接口层</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Adapter</span> </span>&#123;</span><br><span class="line">    <span class="function">BigDecimal <span class="title">toUSD</span><span class="params">(CNY money)</span></span>;</span><br><span class="line">    <span class="function">BigDecimal <span class="title">toTWD</span><span class="params">(CNY money)</span></span>;</span><br><span class="line">    <span class="function">BigDecimal <span class="title">toHKD</span><span class="params">(CNY money)</span></span>;</span><br><span class="line">    <span class="function">BigDecimal <span class="title">toGBP</span><span class="params">(CNY money)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//抽象类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractAdapter</span> <span class="keyword">implements</span> <span class="title">Adapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BigDecimal <span class="title">toUSD</span><span class="params">(CNY money)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BigDecimal <span class="title">toTWD</span><span class="params">(CNY money)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BigDecimal <span class="title">toHKD</span><span class="params">(CNY money)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BigDecimal <span class="title">toGBP</span><span class="params">(CNY money)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BigDecimal <span class="title">exchange</span><span class="params">(CNY money, BigDecimal exchangeRateMolecule, BigDecimal exchangeRateDenominator, <span class="keyword">int</span> scale)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> money.getYuan().multiply(exchangeRateMolecule).divide(exchangeRateDenominator, scale, BigDecimal.ROUND_HALF_UP);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体实现类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HKDAndGBPAdapter</span> <span class="keyword">extends</span> <span class="title">AbstractAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BigDecimal <span class="title">toHKD</span><span class="params">(CNY money)</span> </span>&#123;</span><br><span class="line">        BigDecimal HKD = exchange(money, <span class="keyword">new</span> BigDecimal(<span class="number">111</span>), <span class="keyword">new</span> BigDecimal(<span class="number">100</span>), <span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="string">"Input CNY: "</span> + money.getYuan() + <span class="string">" yuan, Output HKD: "</span> + HKD + <span class="string">" HKD."</span>);</span><br><span class="line">        <span class="keyword">return</span> HKD;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BigDecimal <span class="title">toGBP</span><span class="params">(CNY money)</span> </span>&#123;</span><br><span class="line">        BigDecimal GBP = exchange(money, <span class="keyword">new</span> BigDecimal(<span class="number">11061</span>), <span class="keyword">new</span> BigDecimal(<span class="number">100000</span>), <span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="string">"Input CNY: "</span> + money.getYuan() + <span class="string">" yuan, Output GBP: "</span> + GBP + <span class="string">" GBP."</span>);</span><br><span class="line">        <span class="keyword">return</span> GBP;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">USDAndTWDAdapter</span> <span class="keyword">extends</span> <span class="title">AbstractAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BigDecimal <span class="title">toUSD</span><span class="params">(CNY money)</span> </span>&#123;</span><br><span class="line">        BigDecimal USD = exchange(money, <span class="keyword">new</span> BigDecimal(<span class="number">1435</span>), <span class="keyword">new</span> BigDecimal(<span class="number">10000</span>), <span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="string">"Input CNY: "</span> + money.getYuan() + <span class="string">" CNY, Output USD: "</span> + USD + <span class="string">" USD."</span>);</span><br><span class="line">        <span class="keyword">return</span> USD;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BigDecimal <span class="title">toTWD</span><span class="params">(CNY money)</span> </span>&#123;</span><br><span class="line">        BigDecimal TWD = exchange(money, <span class="keyword">new</span> BigDecimal(<span class="number">43</span>), <span class="keyword">new</span> BigDecimal(<span class="number">10</span>), <span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="string">"Input CNY: "</span> + money.getYuan() + <span class="string">" CNY, Output TWD: "</span> + TWD + <span class="string">" TWD."</span>);</span><br><span class="line">        <span class="keyword">return</span> TWD;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//消费方</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Chinese</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        CNY money = <span class="keyword">new</span> CNY(<span class="keyword">new</span> BigDecimal(<span class="number">100</span>));</span><br><span class="line">        Adapter adapter = <span class="keyword">new</span> USDAndTWDAdapter();</span><br><span class="line">        adapter.toUSD(money);</span><br><span class="line">        adapter.toTWD(money);</span><br><span class="line"></span><br><span class="line">        adapter = <span class="keyword">new</span> HKDAndGBPAdapter();</span><br><span class="line">        adapter.toHKD(money);</span><br><span class="line">        adapter.toGBP(money);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>java</category>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>结构型模式</tag>
      </tags>
  </entry>
  <entry>
    <title>notes</title>
    <url>/papers/java/notes/</url>
    <content><![CDATA[<p>博客内容如有错误，欢迎大家指正！</p>
<p>也欢迎互相交流学习的小伙伴^-^!</p>
<p>微信: Z13616812675</p>
]]></content>
  </entry>
  <entry>
    <title>GOF23之工厂模式</title>
    <url>/papers/java/factory/</url>
    <content><![CDATA[<p>思想源于生活，我想必是源于工厂咯        ——工厂模式</p>
<a id="more"></a>

<h4 id="简单工厂模式和工厂方法模式公共代码"><a href="#简单工厂模式和工厂方法模式公共代码" class="headerlink" title="简单工厂模式和工厂方法模式公共代码"></a>简单工厂模式和工厂方法模式公共代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//以电器举例</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Device</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">info</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AirConditioning</span> <span class="keyword">implements</span> <span class="title">Device</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">info</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"空调信息."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fridge</span> <span class="keyword">implements</span> <span class="title">Device</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">info</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"冰箱信息."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ElectricFan</span> <span class="keyword">implements</span> <span class="title">Device</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">info</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"电风扇信息."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="铁憨憨模式啥都不用"><a href="#铁憨憨模式啥都不用" class="headerlink" title="铁憨憨模式啥都不用"></a>铁憨憨模式啥都不用</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//没啥好说的 上代码</span></span><br><span class="line"><span class="comment">//产品消费方</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Consumer</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//消费产品</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">consume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Device device;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        String type;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//在这里就可以看到产品消费方和产品之间的强耦合关系，消费方需要知道每个产品的生产细节。</span></span><br><span class="line">        <span class="keyword">while</span> (scanner.hasNextLine()) &#123;</span><br><span class="line">            type = scanner.nextLine();</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"airConditioning"</span>:</span><br><span class="line">                    device = <span class="keyword">new</span> AirConditioning();</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"fridge"</span>:</span><br><span class="line">                    device = <span class="keyword">new</span> Fridge();</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"electricFan"</span>:</span><br><span class="line">                    device = <span class="keyword">new</span> ElectricFan();</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    device = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (device == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            device.info();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Consumer consumer = <span class="keyword">new</span> Consumer();</span><br><span class="line">        consumer.consume();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="1-简单工厂模式"><a href="#1-简单工厂模式" class="headerlink" title="1.简单工厂模式"></a>1.简单工厂模式</h4><p>在铁憨憨模式(不使用工厂模式)的eg中可以发现类与类之间具有高耦合度。</p>
<p>使用简单工厂模式的目的：<br>消费方不需要再知道产品的产生细节，至于要告诉工厂需要什么产品就行，降低了消费方与产品之间的强耦合关系。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//个人觉得工厂这种东西只需要一个就行，因此加上了单例</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeviceFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">DeviceFactory</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">inner</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> DeviceFactory INSTANCE = <span class="keyword">new</span> DeviceFactory();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DeviceFactory <span class="title">getFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> inner.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">//简单工厂模式的核心</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Device <span class="title">getDevice</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"airConditioning"</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> AirConditioning();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"fridge"</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Fridge();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"electricFan"</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> ElectricFan();</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//产品消费方</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Consumer</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//消费产品</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">consume</span><span class="params">(DeviceFactory factory)</span> </span>&#123;</span><br><span class="line">        Device device;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        String type;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (scanner.hasNextLine()) &#123;</span><br><span class="line">            type = scanner.nextLine();</span><br><span class="line">            device = factory.getDevice(type);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (device == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            device.info();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Consumer consumer = <span class="keyword">new</span> Consumer();</span><br><span class="line">        consumer.consume(DeviceFactory.getFactory());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-工厂方法模式"><a href="#2-工厂方法模式" class="headerlink" title="2.工厂方法模式"></a>2.工厂方法模式</h4><p>虽然简单工厂模式降低了消费方和产品之间的高耦合性，但是简单工厂模式不符合OCP原则。</p>
<p>因此提出工厂方法模式，通过增大代码量来保证OCP原则，但是会产生大量的工厂类不易于管理。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractDeviceFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Device <span class="title">getDevice</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ElectricFanFactory</span> <span class="keyword">extends</span> <span class="title">AbstractDeviceFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ElectricFanFactory</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">inner</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> ElectricFanFactory INSTANCE = <span class="keyword">new</span> ElectricFanFactory();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ElectricFanFactory <span class="title">createFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> inner.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Device <span class="title">getDevice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ElectricFan();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FridgeFactory</span> <span class="keyword">extends</span> <span class="title">AbstractDeviceFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">FridgeFactory</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">inner</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> FridgeFactory INSTANCE = <span class="keyword">new</span> FridgeFactory();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> FridgeFactory <span class="title">createFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> inner.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Device <span class="title">getDevice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Fridge();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AirConditioningFactory</span> <span class="keyword">extends</span> <span class="title">AbstractDeviceFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">AirConditioningFactory</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">inner</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> AirConditioningFactory INSTANCE = <span class="keyword">new</span> AirConditioningFactory();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> AirConditioningFactory <span class="title">createFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> inner.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Device <span class="title">getDevice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AirConditioning();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ElectricFanFactory electricFanFactory = ElectricFanFactory.createFactory();</span><br><span class="line">        electricFanFactory.getDevice().info();</span><br><span class="line"></span><br><span class="line">        FridgeFactory fridgeFactory = FridgeFactory.createFactory();</span><br><span class="line">        fridgeFactory.getDevice().info();</span><br><span class="line"></span><br><span class="line">        AirConditioningFactory airConditioningFactory = AirConditioningFactory.createFactory();</span><br><span class="line">        airConditioningFactory.getDevice().info();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-抽象工厂模式"><a href="#3-抽象工厂模式" class="headerlink" title="3.抽象工厂模式"></a>3.抽象工厂模式</h4><p>抽象工厂相对于工厂方法模式就是多了一个产品族的概念。</p>
<p>产品族类似于品牌，比如美的，海尔等。其中涉及到两个概念：<br>1.虽然都能生产空调，但是两个品牌肯定有自己的生产技术，尽管都是同一种产品，但是从生产实现上来说是不同的。<br>2.每个品牌也不会只是生产单个种类电器，而是多个(像海尔，美的不都是又卖空调，又卖电视的嘛^_^)，因此每个品牌下面也应该有多个不同类型产品的工厂支撑生产(一般工厂流水线只生产一种产品吧。。小声bb)。</p>
<p>工厂方法模式中是没有品牌只有产品的概念(类似于垄断，这东西只有一个版本且只能我来生产)，因此每种产品只需要一个工厂就行了。</p>
<p>抽象工厂模式中同种产品之间存在了差异性(类似于大家公平竞争，各自研发生产自家的产品)。这个时候就要在工厂方法模式的工厂上再抽出一层品牌工厂层，每个品牌工厂与生产自家产品的所有产品工厂相关联。</p>
<p>总的来说体验了一把工厂地狱的感觉(感觉抽象工厂模式完全是为了解决工厂方法模式的这种问题情况存在的，虽然贴合生活场景，但是并不好用)。</p>
<p>抽象工厂模式对于增加产品族来说是符合OCP原则的，但是对于增加产品等级(产品种类)来说又会违背OCP原则。(OCP原则的倾斜性)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//抽象层</span></span><br><span class="line"><span class="comment">//抽象品牌工厂</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractBrandFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> DeviceFactory <span class="title">getAirConditioningFactory</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> DeviceFactory <span class="title">getFridgeFactory</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> DeviceFactory <span class="title">getElectricFanFactory</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//电器工厂行为接口，有必要可以分成多个---&gt;空调，冰箱等</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DeviceFactory</span> </span>&#123;</span><br><span class="line">    <span class="function">Device <span class="title">getDevice</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//电器行为接口，有必要可以分成多个---&gt;空调，冰箱等</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Device</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">info</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//品牌工厂层</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HaierFactory</span> <span class="keyword">extends</span> <span class="title">AbstractBrandFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取海尔空调工厂</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DeviceFactory <span class="title">getAirConditioningFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> HaierAirConditioningFactory.createFactory();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取海尔冰箱工厂</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DeviceFactory <span class="title">getFridgeFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> HaierFridgeFactory.createFactory();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取海尔电扇工厂</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DeviceFactory <span class="title">getElectricFanFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> HaierElectricFanFactory.createFactory();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MideaFactory</span> <span class="keyword">extends</span> <span class="title">AbstractBrandFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DeviceFactory <span class="title">getAirConditioningFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> MideaAirConditioningFactory.createFactory();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DeviceFactory <span class="title">getFridgeFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> MideaFridgeFactory.createFactory();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DeviceFactory <span class="title">getElectricFanFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> MideaElectricFanFactory.createFactory();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对应生产每个品牌每种产品的工厂(具体产品工厂层)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HaierAirConditioningFactory</span> <span class="keyword">implements</span> <span class="title">DeviceFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">HaierAirConditioningFactory</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">inner</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> HaierAirConditioningFactory INSTANCE = <span class="keyword">new</span> HaierAirConditioningFactory();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> HaierAirConditioningFactory <span class="title">createFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> inner.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Device <span class="title">getDevice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HaierAirConditioning();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HaierElectricFanFactory</span> <span class="keyword">implements</span> <span class="title">DeviceFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">HaierElectricFanFactory</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">inner</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> HaierElectricFanFactory INSTANCE = <span class="keyword">new</span> HaierElectricFanFactory();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> HaierElectricFanFactory <span class="title">createFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> inner.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Device <span class="title">getDevice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HaierElectricFan();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HaierFridgeFactory</span> <span class="keyword">implements</span> <span class="title">DeviceFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">HaierFridgeFactory</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">inner</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> HaierFridgeFactory INSTANCE = <span class="keyword">new</span> HaierFridgeFactory();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> HaierFridgeFactory <span class="title">createFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> inner.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Device <span class="title">getDevice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HaierFridge();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MideaAirConditioningFactory</span> <span class="keyword">implements</span> <span class="title">DeviceFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">MideaAirConditioningFactory</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">inner</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> MideaAirConditioningFactory INSTANCE = <span class="keyword">new</span> MideaAirConditioningFactory();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MideaAirConditioningFactory <span class="title">createFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> inner.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Device <span class="title">getDevice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MideaAirConditioning();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MideaElectricFanFactory</span> <span class="keyword">implements</span> <span class="title">DeviceFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">MideaElectricFanFactory</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">inner</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> MideaElectricFanFactory INSTANCE = <span class="keyword">new</span> MideaElectricFanFactory();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MideaElectricFanFactory <span class="title">createFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> inner.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Device <span class="title">getDevice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MideaElectricFan();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MideaFridgeFactory</span> <span class="keyword">implements</span> <span class="title">DeviceFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">MideaFridgeFactory</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">inner</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> MideaFridgeFactory INSTANCE = <span class="keyword">new</span> MideaFridgeFactory();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MideaFridgeFactory <span class="title">createFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> inner.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Device <span class="title">getDevice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MideaFridge();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//产品层</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HaierAirConditioning</span> <span class="keyword">implements</span> <span class="title">Device</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">info</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"海尔空调信息."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HaierElectricFan</span> <span class="keyword">implements</span> <span class="title">Device</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">info</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"海尔电风扇信息."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HaierFridge</span> <span class="keyword">implements</span> <span class="title">Device</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">info</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"海尔冰箱信息."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MideaAirConditioning</span> <span class="keyword">implements</span> <span class="title">Device</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">info</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"美的空调信息."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MideaElectricFan</span> <span class="keyword">implements</span> <span class="title">Device</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">info</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"美的电风扇信息."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MideaFridge</span> <span class="keyword">implements</span> <span class="title">Device</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">info</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"美的冰箱信息."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对外调用---&gt;消费方</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AbstractBrandFactory haierFactory = <span class="keyword">new</span> HaierFactory();</span><br><span class="line">        haierFactory.getAirConditioningFactory().getDevice().info();</span><br><span class="line">        haierFactory.getElectricFanFactory().getDevice().info();</span><br><span class="line">        haierFactory.getFridgeFactory().getDevice().info();</span><br><span class="line"></span><br><span class="line">        AbstractBrandFactory mideaFactory = <span class="keyword">new</span> MideaFactory();</span><br><span class="line">        mideaFactory.getAirConditioningFactory().getDevice().info();</span><br><span class="line">        mideaFactory.getElectricFanFactory().getDevice().info();</span><br><span class="line">        mideaFactory.getFridgeFactory().getDevice().info();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>java</category>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>创建者模式</tag>
      </tags>
  </entry>
  <entry>
    <title>GOF23之建造者模式</title>
    <url>/papers/java/builder/</url>
    <content><![CDATA[<p>我是一个无情的组装机器         ——建造者模式</p>
<a id="more"></a>

<p>适用场景:<br>Builder模式组装符合业务需求的产品，可以通过不同的顺序组装。<br>这些产品具有相同的结构，但是每个结构模块可以是具备差异性的同类型产品。<br>Builder模式不适合创建差异性很大的产品类，不具备共性没必要合成一个庞大的类，完全可以抽成单独的类。</p>
<p>建造者模式和抽象工厂模式的区别:<br>建造者模式主要是对相似产品组装的可重用性优化，解耦。该模式关注的是产品的组装。<br>抽象工厂模式是产品族的概念 ==&gt; 你要某个产品族的某个产品，先生成该产品族的总工厂，再通过总工厂生成对应等级(种类)产品工厂，最终生产该产品。该模式关注的是不同产品族不同产品等级的生产。</p>
<p>建造者模式是将具体产品的组装抽象到高层，避免重复构建相同的对象，使消费者不必知道具体产品的建造细节，降低消费者和产品之间的耦合性，且保证了OCP原则。</p>
<h4 id="1-标准模式"><a href="#1-标准模式" class="headerlink" title="1.标准模式"></a>1.标准模式</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//产品类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GameScenes</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Boss boss;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 副本宝藏</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Treasure treasure;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GameScenes</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boss <span class="title">getBoss</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> boss;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBoss</span><span class="params">(Boss boss)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.boss = boss;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Treasure <span class="title">getTreasure</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> treasure;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTreasure</span><span class="params">(Treasure treasure)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.treasure = treasure;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Boss : "</span> + <span class="keyword">this</span>.boss.getClass().getSimpleName()</span><br><span class="line">                + <span class="string">", 击杀奖励 : "</span> + <span class="keyword">this</span>.treasure.getClass().getSimpleName() + <span class="string">"."</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Build类(接口 || 抽象类)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Build</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">buildBoss</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">buildTreasure</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">GameScenes <span class="title">build</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Director类</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 指挥者</span></span><br><span class="line"><span class="comment"> * 统一构建所有具体的GameScenes入口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GameScenesDirector</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Build build;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GameScenesDirector</span><span class="params">(Build build)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.build = build;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> GameScenes <span class="title">construct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        build.buildBoss();</span><br><span class="line">        build.buildTreasure();</span><br><span class="line">        <span class="keyword">return</span> build.build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体的Build类</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 峡谷</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Gorge</span> <span class="keyword">implements</span> <span class="title">Build</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> GameScenes gameScenes = <span class="keyword">new</span> GameScenes();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildBoss</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//Boss是牛头人</span></span><br><span class="line">        <span class="keyword">this</span>.gameScenes.setBoss(<span class="keyword">new</span> Tauren());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildTreasure</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//宝藏是牛角</span></span><br><span class="line">        <span class="keyword">this</span>.gameScenes.setTreasure(<span class="keyword">new</span> Horns());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> GameScenes <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.gameScenes;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 龙穴</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DragonCave</span> <span class="keyword">implements</span> <span class="title">Build</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> GameScenes gameScenes = <span class="keyword">new</span> GameScenes();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildBoss</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//boss是条龙</span></span><br><span class="line">        <span class="keyword">this</span>.gameScenes.setBoss(<span class="keyword">new</span> Dragon());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildTreasure</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//宝藏是龙鳞</span></span><br><span class="line">        <span class="keyword">this</span>.gameScenes.setTreasure(<span class="keyword">new</span> DragonScale());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> GameScenes <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.gameScenes;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//消费者</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> GameScenes currentScene;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> GameScenes <span class="title">getCurrentScene</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> currentScene;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">gorgeChallenge</span><span class="params">(Gorge gorge)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"大峡谷冒险:"</span>);</span><br><span class="line">        GameScenesDirector director = <span class="keyword">new</span> GameScenesDirector(gorge);</span><br><span class="line">        <span class="keyword">this</span>.currentScene = director.construct();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dragonCaveChallenge</span><span class="params">(DragonCave dragonCave)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"龙穴挑战:"</span>);</span><br><span class="line">        GameScenesDirector director = <span class="keyword">new</span> GameScenesDirector(dragonCave);</span><br><span class="line">        <span class="keyword">this</span>.currentScene = director.construct();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Consumer consumer = <span class="keyword">new</span> Consumer();</span><br><span class="line">        consumer.dragonCaveChallenge(<span class="keyword">new</span> DragonCave());</span><br><span class="line">        System.out.println(consumer.getCurrentScene());</span><br><span class="line"></span><br><span class="line">        consumer.gorgeChallenge(<span class="keyword">new</span> Gorge());</span><br><span class="line">        System.out.println(consumer.getCurrentScene());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//运行结果</span></span><br><span class="line">龙穴挑战:</span><br><span class="line">Boss : Dragon, 击杀奖励 : DragonScale.</span><br><span class="line">大峡谷冒险:</span><br><span class="line">Boss : Tauren, 击杀奖励 : Horns.</span><br></pre></td></tr></table></figure>

<h4 id="2-改造模式"><a href="#2-改造模式" class="headerlink" title="2.改造模式"></a>2.改造模式</h4><p>建造者模式遵守OCP原则，可是从开发效率来看仍然可以优化，虽然优化需要破坏OCP原则，但是能提高不少开发效率，简化项目结构，实际生产更多的使用改造后的建造者模式。</p>
<p>要是具体产品种类过多，可以考虑把所有的产品构建抽到一个单独的类中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//产品类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GameScenes</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Boss boss;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 副本宝藏</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Treasure treasure;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">GameScenes</span><span class="params">(Builder builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.boss = builder.boss;</span><br><span class="line">        <span class="keyword">this</span>.treasure = builder.treasure;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Builder <span class="title">builder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Builder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Boss : "</span> + <span class="keyword">this</span>.boss.getClass().getSimpleName()</span><br><span class="line">                + <span class="string">", 击杀奖励 : "</span> + <span class="keyword">this</span>.treasure.getClass().getSimpleName() + <span class="string">"."</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Boss boss;</span><br><span class="line">        <span class="keyword">private</span> Treasure treasure;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Builder</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">boss</span><span class="params">(Boss boss)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.boss = boss;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">treasure</span><span class="params">(Treasure treasure)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.treasure = treasure;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> GameScenes <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> GameScenes(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> GameScenes <span class="title">Gorge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> GameScenes.builder()</span><br><span class="line">                .boss(<span class="keyword">new</span> Tauren())</span><br><span class="line">                .treasure(<span class="keyword">new</span> Horns())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> GameScenes <span class="title">DragonCave</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> GameScenes.builder()</span><br><span class="line">                .boss(<span class="keyword">new</span> Dragon())</span><br><span class="line">                .treasure(<span class="keyword">new</span> DragonScale())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//消费方</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> GameScenes currentScene;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> GameScenes <span class="title">getCurrentScene</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> currentScene;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">gorgeChallenge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"大峡谷冒险:"</span>);</span><br><span class="line">        <span class="keyword">this</span>.currentScene = GameScenes.Gorge();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dragonCaveChallenge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"龙穴挑战:"</span>);</span><br><span class="line">        <span class="keyword">this</span>.currentScene = GameScenes.DragonCave();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Consumer consumer = <span class="keyword">new</span> Consumer();</span><br><span class="line">        consumer.gorgeChallenge();</span><br><span class="line">        System.out.println(consumer.getCurrentScene());</span><br><span class="line"></span><br><span class="line">        consumer.dragonCaveChallenge();</span><br><span class="line">        System.out.println(consumer.getCurrentScene());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用结果</span></span><br><span class="line">大峡谷冒险:</span><br><span class="line">Boss : Tauren, 击杀奖励 : Horns.</span><br><span class="line">龙穴挑战:</span><br><span class="line">Boss : Dragon, 击杀奖励 : DragonScale.</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>java</category>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>创建者模式</tag>
      </tags>
  </entry>
  <entry>
    <title>GOF23之单例模式</title>
    <url>/papers/java/singleton/</url>
    <content><![CDATA[<p>有些事物，一份足矣        ——单例模式</p>
<a id="more"></a>

<h4 id="基础单例模式"><a href="#基础单例模式" class="headerlink" title="基础单例模式"></a>基础单例模式</h4><p>缺点：饿汉式的普遍缺点，在类加载的时候就进行了初始化，占用内存资源。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton singleton = <span class="keyword">new</span> Singleton();</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Double-Check-双重检查单例模式"><a href="#Double-Check-双重检查单例模式" class="headerlink" title="Double Check 双重检查单例模式"></a>Double Check 双重检查单例模式</h4><p>优缺点：volatile避免实例化过程中产生的重排序，线程安全，懒加载—使用的时候才会被初始化，不会在未使用前额外占用内存资源。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton singleton;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span>(Singleton<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    singleton = <span class="keyword">new</span> Singleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="补充说明："><a href="#补充说明：" class="headerlink" title="补充说明："></a>补充说明：</h4><p>new为非原子操作，具体分为3步:<br>1.为对象分配内存空间<br>2.将singleton指向刚分配的内存地址<br>3.初始化对象</p>
<p>指令重排序：<br>在保证单线程运行结果一致性的情况下，可以对指令进行优化。</p>
<p>因此上面的操作有两种执行可能:<br>1-&gt;2-&gt;3 || 1-&gt;3-&gt;2<br>而内存空间在初始化前可能为null也可能有别的值</p>
<p>多线程情况下:<br>在不使用volatile情况下，<br>a线程执行到singleton = new Singleton();执行顺序为1-&gt;2-&gt;3;<br>当a线程执行完1和2步骤后，<br>b线程执行了singleton == null的判断，<br>因为内存空间中可能存放有垃圾值，导致判断不成立，<br>直接return singleton;(此时的singleton为垃圾值)，<br>然后a线程执行步骤3。</p>
<p>这种情况就和我们的预期不符，无法保证安全<br>而volatile刚好能避免指令重拍，达到我们的预期效果。</p>
<h4 id="静态内部类单例模式"><a href="#静态内部类单例模式" class="headerlink" title="静态内部类单例模式"></a>静态内部类单例模式</h4><p>优缺点：线程安全，懒加载，当外部类加载的时候不会加载静态内部类，只有调用静态内部类的时候才会对其进行加载以此来实现懒加载。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">inner</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> inner.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="枚举单例模式"><a href="#枚举单例模式" class="headerlink" title="枚举单例模式"></a>枚举单例模式</h4><p>优缺点：线程安全，防止反射和反序列化调用，未实现懒加载，官方推荐。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Singleton &#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>java</category>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>创建者模式</tag>
      </tags>
  </entry>
  <entry>
    <title>GOF23之原型模式</title>
    <url>/papers/java/prototype/</url>
    <content><![CDATA[<p>只要我拷贝的足够深，就能得到不同的你        ——原型模式</p>
<a id="more"></a>

<h4 id="1-浅拷贝"><a href="#1-浅拷贝" class="headerlink" title="1.浅拷贝"></a>1.浅拷贝</h4><p>实现基本类型和String的拷贝，引用类型只拷贝地址。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//teacher类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Teacher</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Teacher&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//course类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Course</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count;</span><br><span class="line">    <span class="keyword">private</span> Teacher teacher;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Course</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Course</span><span class="params">(String name, <span class="keyword">int</span> count, Teacher teacher)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.count = count;</span><br><span class="line">        <span class="keyword">this</span>.teacher = teacher;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Teacher <span class="title">getTeacher</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> teacher;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Course&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", count="</span> + count +</span><br><span class="line">                <span class="string">", teacher="</span> + teacher +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.clone();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用方</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Teacher teacher = <span class="keyword">new</span> Teacher(<span class="string">"tom"</span>, <span class="number">48</span>);</span><br><span class="line">        Course course = <span class="keyword">new</span> Course(<span class="string">"English"</span>, <span class="number">40</span>, teacher);</span><br><span class="line">        Course otherCourse = (Course) course.clone();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"Course:"</span> + course.toString() +</span><br><span class="line">                <span class="string">"  Teacher hashcode:"</span> + course.getTeacher().hashCode());</span><br><span class="line">        System.out.println(<span class="string">"new Course:"</span> + otherCourse.toString() +</span><br><span class="line">                <span class="string">"  Teacher hashcode:"</span> + otherCourse.getTeacher().hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//结果，可以看到teacher指向了同一个内存空间。</span></span><br><span class="line">Course:Course&#123;name=<span class="string">'English'</span>, count=<span class="number">40</span>, teacher=Teacher&#123;name=<span class="string">'tom'</span>, age=<span class="number">48</span>&#125;&#125;  Teacher hashcode:<span class="number">1514322932</span></span><br><span class="line"><span class="keyword">new</span> Course:Course&#123;name=<span class="string">'English'</span>, count=<span class="number">40</span>, teacher=Teacher&#123;name=<span class="string">'tom'</span>, age=<span class="number">48</span>&#125;&#125;  Teacher hashcode:<span class="number">1514322932</span></span><br></pre></td></tr></table></figure>

<h4 id="2-深拷贝"><a href="#2-深拷贝" class="headerlink" title="2.深拷贝"></a>2.深拷贝</h4><h5 id="I-重写clone方法"><a href="#I-重写clone方法" class="headerlink" title="I.重写clone方法"></a>I.重写clone方法</h5><p>这个方法不太好用，因为只要一个类需要深拷贝，那么所有和这个类组合聚合的类都必须实现深拷贝。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Teacher类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Teacher</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Teacher&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//course类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Course</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count;</span><br><span class="line">    <span class="keyword">private</span> Teacher teacher;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Course</span><span class="params">(String name, <span class="keyword">int</span> count, Teacher teacher)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.count = count;</span><br><span class="line">        <span class="keyword">this</span>.teacher = teacher;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Teacher <span class="title">getTeacher</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> teacher;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTeacher</span><span class="params">(Teacher teacher)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.teacher = teacher;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Course&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", count="</span> + count +</span><br><span class="line">                <span class="string">", teacher="</span> + teacher +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Course course = (Course) <span class="keyword">super</span>.clone();</span><br><span class="line">            course.setTeacher((Teacher) course.teacher.clone());</span><br><span class="line">            <span class="keyword">return</span> course;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用方</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Teacher teacher = <span class="keyword">new</span> Teacher(<span class="string">"tom"</span>, <span class="number">48</span>);</span><br><span class="line">        Course course = <span class="keyword">new</span> Course( <span class="string">"English"</span>, <span class="number">40</span>, teacher);</span><br><span class="line">        Course otherCourse = (Course) course.clone();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"Course:"</span> + course.toString() +</span><br><span class="line">                <span class="string">"  Teacher hashcode:"</span> + course.getTeacher().hashCode());</span><br><span class="line">        System.out.println(<span class="string">"new Course:"</span> + otherCourse.toString() +</span><br><span class="line">                <span class="string">"  Teacher hashcode:"</span> + otherCourse.getTeacher().hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//结果，可以看到teacher拷贝成功，指向的是不同的地址。</span></span><br><span class="line">Course:Course&#123;name=<span class="string">'English'</span>, count=<span class="number">40</span>, teacher=Teacher&#123;name=<span class="string">'tom'</span>, age=<span class="number">48</span>&#125;&#125;  Teacher hashcode:<span class="number">1514322932</span></span><br><span class="line"><span class="keyword">new</span> Course:Course&#123;name=<span class="string">'English'</span>, count=<span class="number">40</span>, teacher=Teacher&#123;name=<span class="string">'tom'</span>, age=<span class="number">48</span>&#125;&#125;  Teacher hashcode:<span class="number">654582261</span></span><br></pre></td></tr></table></figure>

<h5 id="II-通过序列化"><a href="#II-通过序列化" class="headerlink" title="II.通过序列化"></a>II.通过序列化</h5><p>只要在需要深拷贝的对象类中实现深拷贝方法，并给这个类和所有和这个类进行组合聚合的类打上Serializable接口标记就能实现对象的深拷贝了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//需要进行深拷贝的对象类--Course类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Course</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count;</span><br><span class="line">    <span class="keyword">private</span> Teacher teacher;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Course</span><span class="params">(String name, <span class="keyword">int</span> count, Teacher teacher)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.count = count;</span><br><span class="line">        <span class="keyword">this</span>.teacher = teacher;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Teacher <span class="title">getTeacher</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> teacher;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Course&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", count="</span> + count +</span><br><span class="line">                <span class="string">", teacher="</span> + teacher +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//只要在需要拷贝的对象类实现序列化深拷贝的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Course <span class="title">deepClone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ByteArrayOutputStream bos = <span class="keyword">null</span>;</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">null</span>;</span><br><span class="line">        ByteArrayInputStream bis = <span class="keyword">null</span>;</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">null</span>;</span><br><span class="line">        Course course;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//序列化</span></span><br><span class="line">            bos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">            oos = <span class="keyword">new</span> ObjectOutputStream(bos);</span><br><span class="line">            oos.writeObject(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//反序列化完成深拷贝</span></span><br><span class="line">            bis = <span class="keyword">new</span> ByteArrayInputStream(bos.toByteArray());</span><br><span class="line">            ois = <span class="keyword">new</span> ObjectInputStream(bis);</span><br><span class="line">            course = (Course) ois.readObject();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> course;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            closeOutputStream(oos);</span><br><span class="line">            closeOutputStream(bos);</span><br><span class="line">            closeInputStream(ois);</span><br><span class="line">            closeInputStream(bis);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">closeOutputStream</span><span class="params">(OutputStream os)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            os.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">closeInputStream</span><span class="params">(InputStream is)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            is.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Teacher类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> Family family;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Teacher</span><span class="params">(String name, <span class="keyword">int</span> age, Family family)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.family = family;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Family <span class="title">getFamily</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> family;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Teacher&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">", family="</span> + family +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Family类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Family</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Family</span><span class="params">(<span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.size = size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Family&#123;"</span> +</span><br><span class="line">                <span class="string">"size="</span> + size +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用方</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Teacher teacher = <span class="keyword">new</span> Teacher(<span class="string">"tom"</span>, <span class="number">48</span>, <span class="keyword">new</span> Family(<span class="number">4</span>));</span><br><span class="line">        Course course = <span class="keyword">new</span> Course( <span class="string">"English"</span>, <span class="number">40</span>, teacher);</span><br><span class="line">        Course otherCourse = course.deepClone();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"Course:"</span> + course.toString() +</span><br><span class="line">                <span class="string">"  Student hashcode:"</span> + course.getTeacher().getFamily().hashCode());</span><br><span class="line">        System.out.println(<span class="string">"new Course:"</span> + otherCourse.toString() +</span><br><span class="line">                <span class="string">"  Student hashcode:"</span> + otherCourse.getTeacher().getFamily().hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//结果，和上面的一样，但是代码量减少不少</span></span><br><span class="line">Course:Course&#123;name=<span class="string">'English'</span>, count=<span class="number">40</span>, teacher=Teacher&#123;name=<span class="string">'tom'</span>, age=<span class="number">48</span>, family=Family&#123;size=<span class="number">4</span>&#125;&#125;&#125;  Family hashcode:<span class="number">875827115</span></span><br><span class="line"><span class="keyword">new</span> Course:Course&#123;name=<span class="string">'English'</span>, count=<span class="number">40</span>, teacher=Teacher&#123;name=<span class="string">'tom'</span>, age=<span class="number">48</span>, family=Family&#123;size=<span class="number">4</span>&#125;&#125;&#125;  Family hashcode:<span class="number">905654280</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>java</category>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>创建者模式</tag>
      </tags>
  </entry>
</search>
